{"version":3,"sources":["App.tsx","web-build/register-service-worker.js"],"names":["App","useState","hasPermission","setHasPermission","Camera","Constants","Type","back","type","setType","useEffect","a","async","requestPermissionsAsync","status","style","flex","backgroundColor","flexDirection","alignSelf","alignItems","onPress","front","fontSize","marginBottom","color","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"8MAIe,SAASA,IAAO,IAAD,EACcC,mBAAS,MADvB,WACrBC,EADqB,KACNC,EADM,OAEJF,mBAASG,IAAOC,UAAUC,KAAKC,MAF3B,WAErBC,EAFqB,KAEfC,EAFe,KAW5B,OAPAC,qBAAU,YACR,WAAC,UAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAC0BP,IAAOS,2BADjC,gBACSC,EADT,EACSA,OACRX,EAA4B,YAAXW,GAFlB,4DAAD,KAIC,IAEmB,OAAlBZ,EACK,kBAAC,IAAD,OAEa,IAAlBA,EACK,kBAAC,IAAD,4BAGP,kBAAC,IAAD,CAAMa,MAAO,CAAEC,KAAM,IACnB,kBAAC,IAAD,CAAQD,MAAO,CAAEC,KAAM,GAAKR,KAAMA,GAChC,kBAAC,IAAD,CACEO,MAAO,CACLC,KAAM,EACNC,gBAAiB,cACjBC,cAAe,QAEjB,kBAAC,IAAD,CACEH,MAAO,CACLC,KAAM,GACNG,UAAW,WACXC,WAAY,UAEdC,QAAS,WACPZ,EACED,IAASJ,IAAOC,UAAUC,KAAKC,KAC3BH,IAAOC,UAAUC,KAAKgB,MACtBlB,IAAOC,UAAUC,KAAKC,QAG9B,kBAAC,IAAD,CAAMQ,MAAO,CAAEQ,SAAU,GAAIC,aAAc,GAAIC,MAAO,UAAtD,gB,+DCzCR,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,wCAAyC,CAAEC,MAAO,oBAC3DC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.79e3209c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, TouchableOpacity } from 'react-native';\nimport { Camera } from 'expo-camera';\n\nexport default function App() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await Camera.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n  return (\n    <View style={{ flex: 1 }}>\n      <Camera style={{ flex: 1 }} type={type}>\n        <View\n          style={{\n            flex: 1,\n            backgroundColor: 'transparent',\n            flexDirection: 'row',\n          }}>\n          <TouchableOpacity\n            style={{\n              flex: 0.1,\n              alignSelf: 'flex-end',\n              alignItems: 'center',\n            }}\n            onPress={() => {\n              setType(\n                type === Camera.Constants.Type.back\n                  ? Camera.Constants.Type.front\n                  : Camera.Constants.Type.back\n              );\n            }}>\n            <Text style={{ fontSize: 18, marginBottom: 10, color: 'white' }}> Flip </Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/zstack-mobile/expo-service-worker.js', { scope: '/zstack-mobile/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}